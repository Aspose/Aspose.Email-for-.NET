<?xml version="1.0" encoding="utf-8"?>
<Data>
  <Folders>
    <Folder>
      <Title>Programmers Guide</Title>
      <Description>This programmers guide for Apose.Email includes examples covering following topics: 

- Programming Email
- Programming Outlook
- Programming Exchange
- Programming Thunderbird
- Programming Email Verify</Description>
      <FolderName>ProgrammersGuide</FolderName>
      <Order>1</Order>
      <Folders>
        <Folder>
          <Title>Programming Email</Title>
          <Description>This section includes examples related to following topics:

- Introduction to Aspose.Email
- Usage scenarios for Aspose.Email.Mail
- Features of Aspose.Email.Mime
- Features of Aspose.Email.Pop3
- Features of Aspose.Email.Imap
- Features of Aspose.Email.Exchange
- Getting started with Programming Email
- Sending Email Messages with SMTP
- Managing Email Messages with POP3
- Managing Emails with IMAP
- Managing Email Message Files with MailMessage
- Aspose.Email HowTos</Description>
          <FolderName>ProgrammingEmail</FolderName>
          <Order>1</Order>
          <Examples>
            <Example>
              <Title>Create new Email</Title>
              <Description>Aspose.Email enables the developers to create the Mime ( Multipurpose Internet Mail Extensions ) Messages from scratch. The main class for this purpose in Aspose.Email API is MailMessage class. This example explains the steps required for creating email messages in EML, MSG and MTH file formats using Aspose.Email.</Description>
              <FolderName>CreateNewEmail</FolderName>
              <Order>2</Order>
              <DocLink>
                <DisplayName>Create new Email</DisplayName>
                <Url>http://www.aspose.com/docs/display/EmailJava/Create+new+Email</Url>
              </DocLink>
              <OutputFiles>
                <DataFile>
                  <Path>..\Data\Message.eml</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\Message.mhtml</Path>
                </DataFile>
                <DataFile>
                  <Path>..\Data\Message.msg</Path>
                </DataFile>
              </OutputFiles>
              <Type>Console</Type>
            </Example>
            <Example>
              <Title>Save message as Draft</Title>
              <Description>Draft is an unfinished message that is not sent yet, rather it is stored in a separate folder for future. Using the Aspose.Email API, the programmer can create a message using the MailMessage class and store it on disk using the MapiMessage class. The email message stored as Draft will always be of Outlook (.MSG) format. This example depicts this usage in detail using Aspose.Email API.</Description>
              <FolderName>SaveMessageAsDraft</FolderName>
              <Order>3</Order>
              <DocLink>
                <DisplayName>Save message as Draft</DisplayName>
                <Url>http://www.aspose.com/docs/display/EmailJava/Save+message+as+Draft</Url>
              </DocLink>
              <OutputFiles>
                <DataFile>
                  <Path>..\Data\New-Draft.msg</Path>
                </DataFile>
              </OutputFiles>
              <Type>Console</Type>
            </Example>
          </Examples>
          <Folders>
            <Folder>
              <Title>Sending Email Messages with SMTP</Title>
              <Description>This section includes the examples related to following topics: 

- Sending Emails
- Load Smtp Authentication Information from Config File
- Connecting to SSL enabled Smtp Server
- Specifying Multiple Recipients
- Set Mail Body
- Managing Email Attachments
- Send Meeting Requests
- Performing Mail Merge
- Working with Embedded Objects
- Importing/Exporting Emails
- Load and Save Appointment in ICS Format
- MailMessage Features
- Customizing Email Headers
- Introduction to Event Handling
- Loading eml file from disk and sending it with SMTP</Description>
              <FolderName>SendEmailMessagesWithSMTP</FolderName>
              <Order>1</Order>
              <Examples>
                <Example>
                  <Title>Load and Save Appointment in ICS Format</Title>
                  <Description>The Appointment class in Aspose.Email can be used to load an appointment in ICS format as well as create a new appointment and save it to disk in ICS format. In this example, creation of an appointment, saving it to disk in ICS format, and then loading it back is explained in detail.</Description>
                  <FolderName>LoadSaveAppointmentInICSFormat</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Load and Save Appointment in ICS Format</DisplayName>
                    <Url>Load+and+Save+Appointment+in+ICS+Format</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\test.ics</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Managing Email Attachments</Title>
                  <Description>An email attachment is a computer file which is sent along with an email message. The file may be sent as a separate message as well as a part of the message to which it is attached.
The Attachment class is used with the MailMessage class. All messages include a body. In addition to the body, you might want to send additional files. These are sent as attachments and are represented as instance of the Attachment class.

To attach an attachment to an email, please follow these steps as described in this example:

- Create an instance of the MailMessage class.
- Create an instance of the Attachment class.
- Load attachment into the Attachment instance.
- Add the Attachment instance into the MailMessage instance.</Description>
                  <FolderName>ManagingEmailAttachments</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Managing Email Attachments</DisplayName>
                    <Url>Managing+Email+Attachments</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\1.txt</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\1.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\1.doc</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\1.pdf</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\1.rar</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\outputAttachments.msg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\outputAttachmentRemoved.msg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\attachment_1.doc</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\attachment_1.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\attachment_1.pdf</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\attachment_1.rar</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Working with Embedded Objects</Title>
                  <Description>An embedded object is an object that was created with one application an enclosed within a document or file created by another application. For example, a Microsoft Excel spreadsheet can be embedded into a Microsoft Word report, or a video file can be embedded into a Microsoft PowerPoint presentation.
When a file is embedded, rather than inserted or pasted into another document, it retains its original format. The embedded document can be opened in the original application and modified.

Aspose.Email lets you work with embedded objects in emails. This example shows how to embed objects. (Extracting emails is described in Extracting Embedded Objects.)</Description>
                  <FolderName>WorkingWithEmbeddedObjects</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Working with Embedded Objects</DisplayName>
                    <Url>Working+with+Embedded+Objects</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.png</Path>
                    </DataFile>
                  </InputFiles>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\EmbeddedImage.msg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Customizing Email Headers</Title>
                  <Description>Email headers represent an Internet standard and RFC define header fields which are included in Internet email messages. An email header can be specified using the MailMessage class. Common header types are defined in the HeaderType class. It is a sealed class that works like a normal enumeration. This example provides details of customizing email header using Aspose.Email.</Description>
                  <FolderName>CustomizingEmailHeaders</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Customizing Email Headers</DisplayName>
                    <Url>Customizing+Email+Headers</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\MsgHeaders.msg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Aspose Email How Tos</Title>
              <Description>This section includes examples related to following topics: 

- How do I send a plain text email?
- How do I send a simple HTML email?
- How do I send email with alternate text?
- How do I request a read receipt?
- How do I specify mail body encoding?
- How do I create multiple email addresses to send email?
- How do I change email addresses to a friendly name?
- How do I add custom headers to my email?
- How do I add secret header to my email?
- How to add and save an attachment
- How to get the number of emails in the mailbox
- How to download messages
- How to delete messages
- SMTP client activity logging
- Create a Draft Appointment Request</Description>
              <FolderName>AsposeEmailHowTos</FolderName>
              <Order>4</Order>
              <Examples>
                <Example>
                  <Title>Create a Draft Appointment Request</Title>
                  <Description>It is often required to create an Appointment request in Draft mode, so as the basic information is added and then the same draft Appointment be forwarded to other users for necessary changes according to individual users.
In order to save an Appointment in Draft mode, the Method property of Appointment class should be set to Publish. This example demonstrates the use of this concept using Aspose.Email.</Description>
                  <FolderName>CreateDraftAppointmentRequest</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Create a Draft Appointment Request</DisplayName>
                    <Url>Create+a+Draft+Appointment+Request</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\draftAppointment.msg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Managing Email Message Files with MailMessage</Title>
              <Description>This section includes examples related to following topics: 

- Extracting Email Headers 
- Displaying Email Information on screen 
- Extracting Email Attachments 
- Extracting Embedded Objects</Description>
              <FolderName>ManageEmailMessageFilesWithMailMessage</FolderName>
              <Order>5</Order>
              <Examples>
                <Example>
                  <Title>Extracting Email Headers</Title>
                  <Description>The email header represents an Internet and RFC defined standard set of header fields included in Internet email messages. An email header can be specified using the MailMessage class. Common header types are defined in the HeaderType class. It is a sealed class working like normal enumeration.

To extract headers from an email, follow these steps:

- Create an instance of the MailMessage class.
- Load an email message in the instance of MailMessage class.
- After an email message has been loaded, we will get its raw content. The MailMessage class itself contains properties such as From, To, Cc, Subject and so on. These properties can be extracted from headers.
- Display the raw content.</Description>
                  <FolderName>ExtractingEmailHeaders</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Extracting Email Headers</DisplayName>
                    <Url>Extracting+Email+Headers</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\test.eml</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Displaying Email Information on Screen</Title>
                  <Description>The MailMessage represents an email message and allows developers to access email message properties. The header information (discussed in Extracting Email Headers) can be extracted and manipulated in different ways. This example explains how to display selected email header information and the email body on screen.</Description>
                  <FolderName>DisplayEmailInformationOnScreen</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Displaying Email Information on Screen</DisplayName>
                    <Url>Displaying+Email+Information+on+Screen</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\test.eml</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
          </Folders>
        </Folder>
        <Folder>
          <Title>Programming Outlook</Title>
          <Description>This section includes examples related to the following topics: 

- Your First Application with Aspose.Email.Outlook 
- Managing Message Files with Aspose.Email.Outlook</Description>
          <FolderName>ProgrammingOutlook</FolderName>
          <Order>2</Order>
          <Folders>
            <Folder>
              <Title>Managing Message Files with Aspose.Email.Outlook</Title>
              <Description>This section includes the examples related to following topics: 

- Loading, Viewing and Parsing Outlook Message (MSG) File
- Accessing Outlook MAPI Property
- Reading Named MAPI Properties from Outlook Message (MSG) Files
- Creating and Saving Outlook Message (MSG) Files
- EML to MSG Converter
- Managing Attachments with Aspose Outlook
- Read Outlook Template File (.OFT)
- Using Aspose Outlook Control to Drag &amp; Drop Outlook Messages to Windows Forms
- Read Outlook PST File and Get Folder and Subfolder Information
- Read Outlook OST File
- Get Message Information from an Outlook PST File
- Extract Messages from Outlook PST Files and Save to Disk or Stream in MSG Format
- Access Contact Information from Outlook PST File and Save to Disk in MSG format
- Save Contacts Information from Outlook PST to Disk in vCard format (VCF)
- Save Calendar Items from Outlook PST to Disk in ICS format
- Create a New PST File and Add Subfolders
- Add Messages to PST Files
- Delete Messages from PST Files
- Check if a PST is password protected</Description>
              <FolderName>ManageMessageFiles</FolderName>
              <Order>1</Order>
              <Examples>
                <Example>
                  <Title>Create a New PST File and Add Subfolders</Title>
                  <Description>As well as parsing an existing PST file, Aspose.Email provides the means to create a PST file from scratch. This example  demonstrates how to create an Outlook PST file and add a subfolder to it.</Description>
                  <FolderName>NewPSTAddSubfolders</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Create a New PST File and Add Subfolders</DisplayName>
                    <Url>Create+a+New+PST+File+and+Add+Subfolders</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\PersonalStorage.pst</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Working with Outlook Message (MSG) Files</Title>
              <Description>This section includes examples related to the following topics: 

- Parsing Outlook Message Files
- Accessing Outlook MAPI Properties
- Parsing and Saving Attachments
- Read Outlook Template File (.OFT)
- Creating and Saving Outlook Message (MSG) Files</Description>
              <FolderName>WorkWithOutlookMSGFiles</FolderName>
              <Order>2</Order>
              <Examples>
                <Example>
                  <Title>Creating and Saving Outlook Message (MSG) Files</Title>
                  <Description>Aspose.Email also supports creating an outlook message (msg) files. The MailMessage class has the save() method that can save the outlook msg file to disk or stream. In this example, we will create an instance of the MailMessage class, set some properties like from, to, subject, body and save it.</Description>
                  <FolderName>CreateSaveOutlookFiles</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Creating and Saving Outlook Message (MSG) Files</DisplayName>
                    <Url>http://www.aspose.com/docs/display/EmailJava/Creating+and+Saving+Outlook+Message+(MSG)+Files</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\message.msg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
          </Folders>
        </Folder>
      </Folders>
    </Folder>
    <Folder>
      <Title>Knowledge Base</Title>
      <Description>This section includes the examples related to following topics: 

- Technical Articles
- Migration from Office Automation to Aspose
- Utilizing Aspose.Email for .NET in other Programming Languages</Description>
      <FolderName>KnowledgeBase</FolderName>
      <Order>2</Order>
      <Examples>
        <Example>
          <Title>Aspose.Email.Printing Features</Title>
          <Description>The Aspose.Email.Printing namespace provides a rich set of features for printing mail messages to different formats (XPS or TIFF) and configuring page layouts. This examples describes these features in detail. Following are the key features explained by example:

- Printing the message body only.
- Printing the message body and headers.
- Printing an HTML body.
- Setting the page layout.
- Auto-fit a TIFF to the printer.</Description>
          <FolderName>PrintingFeatures</FolderName>
          <Order>1</Order>
          <DocLink>
            <DisplayName>Aspose.Email.Printing Features</DisplayName>
            <Url>Aspose.Email.Printing+Features</Url>
          </DocLink>
          <OutputFiles>
            <DataFile>
              <Path>..\Data\test.tiff</Path>
            </DataFile>
            <DataFile>
              <Path>..\Data\test.xps</Path>
            </DataFile>
          </OutputFiles>
          <Type>Console</Type>
        </Example>
      </Examples>
    </Folder>
  </Folders>
</Data>